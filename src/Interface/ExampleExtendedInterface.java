package Interface;

/**
 * !Важная тема!
 *
 * Интерфейс - особый тип абстрактного класса, который содержит только объявления методов,
 * но не их реализацию. В интерфейсе могут быть только статические элементы.
 * По этому объявлять static & final не нужно, они стоят по умолчанию.
 * Каждый класс, в описании которого указано, что он реализует некоторый интерфейс,
 * обязан реалиовать все методы этого интерфейса.
 *
 * Вопрос: Зачем вводить понятие интерфейса, если уже есть абстрактный класс?
 * Ответ: Интерфейс решает проблемы связанные с наследованием. Чтобы сделать абстректный метод класса,
 * новый класс должен быть потомком того класса, в котором метод объявлен.
 * А наследование нового класса от имеющегося имеет смысл тогда, когда объекты нового класса можно считать разновидностью
 * объектов старого класса (Орк - ОркМаг - ОркВоин - ОркЛучник - ОркЗаклинатель).
 *
 * Но если делать движок игры, то они должны перемещаться независимо от их типа.
 * Значит все классы, описывающие объект игры, должны реализовывать метод move(); как абстракный метод где-то в общем предке.
 * Но для классов, описывающих такие разные объекты, очень трудно подобрать общего предка и организация этих классов в иерархию создаст больше проблем.
 *
 * Здесь и полезны интерфейсы. Они не входят в иерархию классов и реализовать один и тотже интерфейс имеют право классы, никак не связанные.
 * В примере с движком игры мы просто объявим интерфейс с методом move(); и укажем, что все классы, описывающие объекты игры, его реализуют.
 *
 * Один интерфейс может наследовать свойства другого, но не свойства класса.
 * Первый интерфейс расширяет второй с помощью extends.
 * Если класс реализует расширенный интерфейс, то этот класс содержит реализацию
 * всех методов самого интерфейса и его предков.
 */

interface A {
    void metodA();
}

interface B extends A{
    void metodB();
}

class IExample implements B{

    @Override
    public void metodA() {
        System.out.println("Метод A");
    }

    @Override
    public void metodB() {
        System.out.println("Метод В");
    }

}

public class ExampleExtendedInterface {
    public static void main(String[] args) {
        IExample ie = new IExample();
        ie.metodA();
        ie.metodB();
    }
}